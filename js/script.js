"use strict";

// Функция — это самостоятельный блок кода, который можно, один раз объявив, вызывать столько раз,
// сколько нужно. Функция может, хотя это и необязательно, принимать параметры. Функции возвращают
// единственное значение.
// Функции в JavaScript являются объектами, если точнее, то они являются объектами типа Function.

// Замыкание функции - это сама функиция со всеми внешними переменными, которые ей доступны.

// return - возвращает значаение функции во внешний мир


// Фунцкии

// Function declaration - ссоздаётся до начала выполнения скрипта, можно вызвать перед выполнением.

// function foo() {
//     код
// }

// Function expression - создаётся только тогда, когда доходит поток кода, можно вызывать только
// после объявления

// let foo = function() {
//     код
// }

// Стрелочные функции не имеет своего контекста (this)

// () = >

// const calc = (a, b) => { return a + b };  (можно a + b)

// const calc = (a, b) => {
//     console.log('1');
//     return a + b;
// };

// tasks

// 1) Создайте функцию, которая будет на вход принимать 1 аргумент с именем человека и возвращать строку.

// Пример: вызов функции sayHello('Антон') возвращает строку "Привет,
// Антон!". В решении вызывать функцию не нужно, программа сделает это за вас.

// P.S. возвращать - это использовать ключевое слово return.

// P.S.S. Это классическая функция-модификатор, которых мы дальше по курсу будем создавать еще много в разных видах.

function sayHello(name) {
    return `Привет,${name}!`;
}

console.log(sayHello('Антон'));

// 2) Создайте функцию, которая принимает в себя 1 аргумент в виде целого
// числа и возвращает массив из трех чисел: одно на 1 меньше, сам аргумент,
// и число на 1 больше.

// Пример: вызов функции returnNeighboringNumbers(5) возвращает массив в виде [4, 5, 6].

function returnNeighboringNumbers(num) {
    return [num - 1, num, num + 1];
}

console.log(returnNeighboringNumbers(5));

// 3) Создайте функцию, которая будет принимать в себя 2 аргумента, оба
// числа. Первое число - это база, второе число - это сколько раз нужно
// будет повторить это число в прогрессии. (Смотри пример ниже). Функция
// должна возвращать строку (или число в особых случаях, о которых ниже),
// где эти числа идут по порядку, разделенные тремя дефисами "---". После последнего числа их не должно быть.

// Если второй аргумент не является числом, равен или меньше нуля - то
// возвращать просто первый аргумент. (Проверяем через оператор typeof)

// Примеры:

// Вызов функции getMathResult(5, 3) даст ответ 5---10---15

// Вызов функции getMathResult(3, 10) даст ответ 3---6---9---12---15---18---21---24---27---30

// Вызов функции getMathResult(10, 5) даст ответ 10---20---30---40---50

// Вызов функции getMathResult(10, '5') даст ответ 10

// Вызов функции getMathResult(10, 0) даст ответ 10

// Вызов функции getMathResult(20, -5) даст ответ 20

// function getMathResult(number, times) {
//     if (typeof(times) !== 'number' ||  times <= 0 ||) {
//         return number;
//     }

//     let str = '';

//     for (let i = 1; i <= times; i++) {
//         if (i == times) {
//             str += `${number * i}`;
//         } else {
//             str += `${number * i}---`;
//         }
//     }

//     return str;
// }

// console.log(getMathResult(10, 5));

// tasks

// 1) Создайте функцию, которая будет вычислять объем и площадь полной поверхности куба
// (тоже базовая математика, иногда используется в создании анимаций). Эта функция принимает в
// себя целое число со значением длины ребра куба. Ответ выведите в формате строки, который изображен в примерах.

// Если в функцию попал неправильный аргумент или вычислить значения невозможно - вернуть строку
// "При вычислении произошла ошибка"

function calculateVolumeAndArea(num) {
    if (typeof(num) !== 'number' || num <= 0 || !Number.isInteger(num)) {
        return `При вычислении произошла ошибка`;
    } else {
        const v = num * num * num;
        const s = num * num * 6;
        return `Объем куба: ${v}, площадь всей поверхности: ${s}`;
    }
}

console.log(calculateVolumeAndArea(12.2));

// 2) Функция принимает только целое число от 1 до 36.
// Если переданный аргумент не число, отрицательное или дробное - возвращается сообщение:
// "Ошибка. Проверьте правильность введенного номера места"
// Если число 0 или больше 36, то сообщение: "Таких мест в вагоне не существует"

function getCoupeNumber(number) {
    if (!Number.isInteger(number) || number < 0 || typeof(number) == 'number') {
        return "Ошибка. Проверьте правильность введенного номера места";
    } else if 
           ( number == 0 || number > 36) {
            return "Таких мест в вагоне не существует";
        } else {
            return Math.ceil(number / 4);
        }
}

console.log(getCoupeNumber(1));

// 3) Создайте функцию, которая принимает в себя целое число минут и возвращает время в нужном
// формате строки. (Смотри пример). Обратите внимание на окончание слова "час" - оно меняется в
// зависимости от цифры. Если вместо аргумента приходит не число, дробное или отрицательное число - функция возвращает строку "Ошибка, проверьте данные"

function getTimeFromMinutes(minutes) {

    if ( typeof(minutes) !== 'number' || !Number.isInteger(minutes) || minutes < 0) {
        return "Ошибка, проверьте данные";
    }

    const hours = Math.floor(minutes / 60);
    const min = minutes % 60;
    let hoursStr = '';
    let minStr = '';


    if ( hours == 1 ) {
        hoursStr = `${hours} час`;
    } else if ( hours < 5 && hours > 0) {
        hoursStr = `${hours} часа`;
    } else {
        hoursStr = `${hours} часов`;

    }

    if ( min === 1 ) {
        minStr = `${min} минута`;
    } else if ( min < 5 && min > 0) {
        minStr = `${min} минуты`;
    } else {
        minStr = `${min} минут`;

    }

    return `Это ${hoursStr} и ${minStr}`;
}

console.log(getTimeFromMinutes(150));

// Напишите функцию, которая принимает в себя 4 числа и возвращает самое большее из них. Если один
// из аргументов не является числом или их меньше 4 - возвращается 0. Дробные числа разрешены.

function findMaxNumber(num1, num2, num3, num4) {

    if (findMaxNumber.length < 4 ||
        typeof(num1) !== 'number' ||
        typeof(num2) !== 'number' ||
        typeof(num3) !== 'number' ||
        typeof(num4) !== 'number') {
            return 0;
        } else {
            return Math.max(num1, num2, num3, num4);
        }
}

console.log(findMaxNumber(1, 2, 3, 4));

// Задача с собеседований на числа Фибоначчи

// Это одна из классических задач в программировании на самых разных языках.
// Скорее всего вы слышали про числа Фибоначчи, где первые два числа равны 
// 0 и 1, а каждое последующее число равно сумме двух предыдущих чисел. И
// на собеседованиях часто дают задачи, связанные с этими числами.

// Создайте функцию, которая будет принимать в себя один аргумент-целое
// положительное число. Она должна возвращать строку, в которой будут через
// пробел выведены числа Фибоначчи. Причем, их количество должно быть равно переданному аргументу.

// Если переданный аргумент не число - вернуть пустую строку. Решать без применения рекурсии.

// Пример:

// fib(4) => "0 1 1 2"

// fib(7) => "0 1 1 2 3 5 8"

// fib('7') => ""

// fib(1) => "0"

// fib(0) => ""

function fib(num) {
    if (typeof(num) !== 'number' || !Number.isInteger(num) || num < 0) {
        return '';
    }

    let strFib = [];

    for (let i = 0; i < num; i++) {
        if ( i === 0 || i === 1) {
            strFib.push(i);
        } else {
            let formula = Number(strFib.slice(-2, -1).join()) + Number(strFib.slice(-1).join());
            strFib.push(formula);
        }
    }

    return strFib.join(' ');
}

console.log(fib(7));

// Ещё один способ

function fib(count) {
    if (typeof (count) !== 'number' || count <= 0 || count % 1 !== 0) {
        return '';
    }
    const arrNumbers = [0];
    for (let i = 1; i < count; i++) {
        if (i === 1){
            arrNumbers.push(1);
        } else {
            arrNumbers.push(arrNumbers[i-1] + arrNumbers[i-2]);
        }            
    }
    return arrNumbers.join(' ');
}

console.log(fib(6));

const arrNumbers = [4, 5, 7, 7];

console.log(arrNumbers[0]);